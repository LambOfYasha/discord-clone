generator client {
  provider = "prisma-client-js"
  output   = "../../prisma/generated/postgres"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers                   Server[]
  members                   Member[]
  channels                  Channel[]
  conversations             Conversation[]
  groupConversations        GroupConversationMember[]
  groupConversationsCreated GroupConversation[]
  friendRequestsSent        FriendRequest[]           @relation("FriendRequestRequester")
  friendRequestsReceived    FriendRequest[]           @relation("FriendRequestTarget")

  @@map("profiles")
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String    @unique
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("servers")
}

model Member {
  id                     String                    @id @default(uuid())
  role                   MemberRole                @default(GUEST)
  profileId              String
  profile                Profile                   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server                    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  conversationsInitiated Conversation[]            @relation("MemberOne")
  conversationsReceived  Conversation[]            @relation("MemberTwo")
  groupConversations     GroupConversationMember[]
  groupMessages          GroupMessage[]
  directMessages         DirectMessage[]
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt

  @@unique([profileId, serverId])
  @@map("members")
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("channels")
}

model Conversation {
  id          String          @id @default(uuid())
  memberOneId String
  memberOne   Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  profileId   String
  profile     Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  messages    DirectMessage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([memberOneId, memberTwoId])
  @@map("conversations")
}

model GroupConversation {
  id        String                    @id @default(uuid())
  name      String
  imageUrl  String?
  profileId String
  profile   Profile                   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members   GroupConversationMember[]
  messages  GroupMessage[]
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt

  @@map("group_conversations")
}

model GroupConversationMember {
  id                  String            @id @default(uuid())
  role                GroupMemberRole   @default(GUEST)
  profileId           String
  profile             Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  groupConversationId String
  groupConversation   GroupConversation @relation(fields: [groupConversationId], references: [id], onDelete: Cascade)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([profileId, groupConversationId])
  @@map("group_conversation_members")
}

model GroupMessage {
  id                  String            @id @default(uuid())
  content             String
  fileUrl             String?
  deleted             Boolean           @default(false)
  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  groupConversationId String
  groupConversation   GroupConversation @relation(fields: [groupConversationId], references: [id], onDelete: Cascade)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("group_messages")
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  deleted        Boolean      @default(false)
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("direct_messages")
}

model FriendRequest {
  id                 String              @id @default(uuid())
  requesterProfileId String
  requesterProfile   Profile             @relation("FriendRequestRequester", fields: [requesterProfileId], references: [id], onDelete: Cascade)
  targetProfileId    String
  targetProfile      Profile             @relation("FriendRequestTarget", fields: [targetProfileId], references: [id], onDelete: Cascade)
  status             FriendRequestStatus @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([requesterProfileId, targetProfileId])
  @@map("friend_requests")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum GroupMemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
