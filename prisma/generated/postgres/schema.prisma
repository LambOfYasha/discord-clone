generator client {
  provider = "prisma-client-js"
  output   = "../../prisma/generated/postgres"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Profile {
  id          String     @id @default(uuid())
  userId      String     @unique
  name        String
  nickname    String? // Display name
  imageUrl    String
  email       String
  status      UserStatus @default(ONLINE)
  bio         String? // About me section
  website     String? // Personal website
  socialMedia Json? // Social media links (Twitter, Instagram, etc.)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  servers                       Server[]
  members                       Member[]
  channels                      Channel[]
  conversations                 Conversation[]
  groupConversations            GroupConversationMember[]
  groupConversationsCreated     GroupConversation[]
  friendRequestsSent            FriendRequest[]           @relation("FriendRequestRequester")
  friendRequestsReceived        FriendRequest[]           @relation("FriendRequestTarget")
  messageRequestsSent           MessageRequest[]          @relation("MessageRequestRequester")
  messageRequestsReceived       MessageRequest[]          @relation("MessageRequestTarget")
  followsSent                   Follow[]                  @relation("FollowerProfile")
  followsReceived               Follow[]                  @relation("FollowingProfile")
  serverFollows                 ServerFollow[]            @relation("ServerFollowerProfile")
  notificationsReceived         Notification[]            @relation("NotificationRecipient")
  notificationsRelated          Notification[]            @relation("NotificationRelatedProfile")
  serverEventsCreated           ServerEvent[]             @relation("ProfileCreatedEvents")
  embedsCreated                 Embed[]                   @relation("ProfileCreatedEmbeds")
  scheduledAnnouncementsCreated ScheduledAnnouncement[]   @relation("ProfileCreatedAnnouncements")
  ticketsRequested              Ticket[]                  @relation("TicketRequester")
  ticketsAssigned               Ticket[]                  @relation("TicketAssigned")
  ticketMessagesSent            TicketMessage[]           @relation("TicketMessageSender")

  @@map("profiles")
}

model Server {
  id                     String                  @id @default(uuid())
  name                   String
  imageUrl               String
  inviteCode             String                  @unique
  category               ServerCategory          @default(POPULAR)
  profileId              String
  profile                Profile                 @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members                Member[]
  channels               Channel[]
  categories             Category[]
  serverFollows          ServerFollow[]
  notificationsRelated   Notification[]          @relation("NotificationRelatedServer")
  events                 ServerEvent[]
  embeds                 Embed[]
  scheduledAnnouncements ScheduledAnnouncement[]
  ticketSystem           TicketSystem?
  tickets                Ticket[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  @@map("servers")
}

model Member {
  id                     String                    @id @default(uuid())
  role                   MemberRole                @default(GUEST)
  profileId              String
  profile                Profile                   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server                    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  conversationsInitiated Conversation[]            @relation("MemberOne")
  conversationsReceived  Conversation[]            @relation("MemberTwo")
  groupConversations     GroupConversationMember[]
  groupMessages          GroupMessage[]
  directMessages         DirectMessage[]
  messages               Message[]
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt

  @@unique([profileId, serverId])
  @@map("members")
}

model Channel {
  id                     String                  @id @default(uuid())
  name                   String
  type                   ChannelType             @default(TEXT)
  profileId              String
  profile                Profile                 @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server                  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  categoryId             String?
  category               Category?               @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  threads                Thread[]
  voiceEvents            ServerEvent[]           @relation("VoiceChannelEvent")
  textEvents             ServerEvent[]           @relation("TextChannelEvent")
  embeds                 Embed[]
  scheduledAnnouncements ScheduledAnnouncement[]
  ticketSystem           TicketSystem?
  tickets                Ticket[]
  messages               Message[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  @@map("channels")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  serverId  String
  server    Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Conversation {
  id          String          @id @default(uuid())
  memberOneId String
  memberOne   Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  profileId   String
  profile     Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  messages    DirectMessage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([memberOneId, memberTwoId])
  @@map("conversations")
}

model GroupConversation {
  id        String                    @id @default(uuid())
  name      String
  imageUrl  String?
  profileId String
  profile   Profile                   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members   GroupConversationMember[]
  messages  GroupMessage[]
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt

  @@map("group_conversations")
}

model GroupConversationMember {
  id                  String            @id @default(uuid())
  role                GroupMemberRole   @default(GUEST)
  profileId           String
  profile             Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  groupConversationId String
  groupConversation   GroupConversation @relation(fields: [groupConversationId], references: [id], onDelete: Cascade)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([profileId, groupConversationId])
  @@map("group_conversation_members")
}

model GroupMessage {
  id                  String            @id @default(uuid())
  content             String
  fileUrl             String?
  deleted             Boolean           @default(false)
  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  groupConversationId String
  groupConversation   GroupConversation @relation(fields: [groupConversationId], references: [id], onDelete: Cascade)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("group_messages")
}

model Message {
  id             String   @id @default(uuid())
  content        String
  fileUrl        String?
  memberId       String
  channelId      String
  deleted        Boolean  @default(false)
  pinned         Boolean  @default(false)
  replyTo        String?
  threadId       String?
  threadParentId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  member         Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel        Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  deleted        Boolean      @default(false)
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("direct_messages")
}

model FriendRequest {
  id                 String              @id @default(uuid())
  requesterProfileId String
  requesterProfile   Profile             @relation("FriendRequestRequester", fields: [requesterProfileId], references: [id], onDelete: Cascade)
  targetProfileId    String
  targetProfile      Profile             @relation("FriendRequestTarget", fields: [targetProfileId], references: [id], onDelete: Cascade)
  status             FriendRequestStatus @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([requesterProfileId, targetProfileId])
  @@map("friend_requests")
}

model MessageRequest {
  id                 String               @id @default(uuid())
  requesterProfileId String
  requesterProfile   Profile              @relation("MessageRequestRequester", fields: [requesterProfileId], references: [id], onDelete: Cascade)
  targetProfileId    String
  targetProfile      Profile              @relation("MessageRequestTarget", fields: [targetProfileId], references: [id], onDelete: Cascade)
  message            String
  status             MessageRequestStatus @default(PENDING)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("message_requests")
}

model Follow {
  id                 String   @id @default(uuid())
  followerProfileId  String
  followerProfile    Profile  @relation("FollowerProfile", fields: [followerProfileId], references: [id], onDelete: Cascade)
  followingProfileId String
  followingProfile   Profile  @relation("FollowingProfile", fields: [followingProfileId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())

  @@unique([followerProfileId, followingProfileId])
  @@map("follows")
}

model ServerFollow {
  id                String   @id @default(uuid())
  followerProfileId String
  followerProfile   Profile  @relation("ServerFollowerProfile", fields: [followerProfileId], references: [id], onDelete: Cascade)
  serverId          String
  server            Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())

  @@unique([followerProfileId, serverId])
  @@map("server_follows")
}

model Thread {
  id              String   @id @default(uuid())
  channelId       String
  channel         Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parentMessageId String?
  name            String?
  messageCount    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("threads")
}

model Notification {
  id                 String           @id @default(uuid())
  recipientProfileId String
  recipientProfile   Profile          @relation("NotificationRecipient", fields: [recipientProfileId], references: [id], onDelete: Cascade)
  type               NotificationType
  title              String
  content            String
  relatedProfileId   String?
  relatedProfile     Profile?         @relation("NotificationRelatedProfile", fields: [relatedProfileId], references: [id], onDelete: SetNull)
  relatedServerId    String?
  relatedServer      Server?          @relation("NotificationRelatedServer", fields: [relatedServerId], references: [id], onDelete: SetNull)
  isRead             Boolean          @default(false)
  createdAt          DateTime         @default(now())

  @@map("notifications")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum GroupMemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ServerCategory {
  POPULAR
  CHRISTIANITY
  BUSINESS
  SOCIAL
  SCIENCE_AND_EDUCATION
}

enum NotificationType {
  FRIEND_ACTIVITY
  SERVER_ACTIVITY
  FRIEND_ONLINE
  SERVER_JOIN
  MESSAGE_MENTION
  SERVER_INVITE
}

enum UserStatus {
  ONLINE
  IDLE
  DO_NOT_DISTURB
  INVISIBLE
}

// Events feature
model ServerEvent {
  id                 String                  @id @default(uuid())
  title              String
  description        String?
  type               EventType
  otherLocationType  OtherEventLocationType?
  serverId           String
  server             Server                  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  creatorProfileId   String
  creatorProfile     Profile                 @relation("ProfileCreatedEvents", fields: [creatorProfileId], references: [id], onDelete: Cascade)
  voiceChannelId     String?
  voiceChannel       Channel?                @relation("VoiceChannelEvent", fields: [voiceChannelId], references: [id], onDelete: SetNull)
  textChannelId      String?
  textChannel        Channel?                @relation("TextChannelEvent", fields: [textChannelId], references: [id], onDelete: SetNull)
  externalUrl        String?
  location           String?
  scheduledStartTime DateTime
  scheduledEndTime   DateTime?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt

  @@map("server_events")
}

// Embed feature
model Embed {
  id               String       @id @default(uuid())
  title            String?
  description      String?
  url              String?
  color            String? // Hex color code
  imageUrl         String?
  thumbnailUrl     String?
  authorName       String?
  authorUrl        String?
  authorIconUrl    String?
  footerText       String?
  footerIconUrl    String?
  timestamp        DateTime?
  serverId         String
  server           Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channelId        String?
  channel          Channel?     @relation(fields: [channelId], references: [id], onDelete: SetNull)
  creatorProfileId String
  creatorProfile   Profile      @relation("ProfileCreatedEmbeds", fields: [creatorProfileId], references: [id], onDelete: Cascade)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  fields           EmbedField[]

  @@map("embeds")
}

model EmbedField {
  id        String   @id @default(uuid())
  name      String
  value     String
  inline    Boolean  @default(false)
  embedId   String
  embed     Embed    @relation(fields: [embedId], references: [id], onDelete: Cascade)
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("embed_fields")
}

// Scheduled Announcements feature
model ScheduledAnnouncement {
  id               String       @id @default(uuid())
  title            String
  message          String
  serverId         String
  server           Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channelId        String
  channel          Channel      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  creatorProfileId String
  creatorProfile   Profile      @relation("ProfileCreatedAnnouncements", fields: [creatorProfileId], references: [id], onDelete: Cascade)
  scheduleType     ScheduleType
  scheduleData     Json // Stores schedule-specific data (cron expression, interval, etc.)
  isActive         Boolean      @default(true)
  lastSentAt       DateTime?
  nextSendAt       DateTime
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("scheduled_announcements")
}

enum EventType {
  VOICE
  OTHER
}

enum OtherEventLocationType {
  TEXT_CHANNEL
  EXTERNAL
  LOCATION
}

enum ScheduleType {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

// Ticket Support System
model TicketSystem {
  id             String   @id @default(uuid())
  serverId       String   @unique
  server         Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channelId      String   @unique
  channel        Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  isActive       Boolean  @default(true)
  welcomeMessage String? // Message shown when ticket system is accessed
  maxOpenTickets Int      @default(3) // Maximum open tickets per user
  autoCloseHours Int      @default(72) // Auto-close tickets after X hours of inactivity
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tickets        Ticket[]

  @@map("ticket_systems")
}

model Ticket {
  id                 String          @id @default(uuid())
  ticketNumber       String          @unique // Human-readable ticket number like #TICKET-001
  title              String
  description        String
  status             TicketStatus    @default(OPEN)
  priority           TicketPriority  @default(MEDIUM)
  category           TicketCategory  @default(GENERAL)
  requesterProfileId String
  requesterProfile   Profile         @relation("TicketRequester", fields: [requesterProfileId], references: [id], onDelete: Cascade)
  assignedProfileId  String?
  assignedProfile    Profile?        @relation("TicketAssigned", fields: [assignedProfileId], references: [id], onDelete: SetNull)
  serverId           String
  server             Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  ticketSystemId     String
  ticketSystem       TicketSystem    @relation(fields: [ticketSystemId], references: [id], onDelete: Cascade)
  channelId          String?
  channel            Channel?        @relation(fields: [channelId], references: [id], onDelete: SetNull)
  lastActivity       DateTime        @default(now())
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  messages           TicketMessage[]

  @@map("tickets")
}

model TicketMessage {
  id              String   @id @default(uuid())
  content         String
  fileUrl         String?
  isInternal      Boolean  @default(false) // Internal notes visible only to staff
  ticketId        String
  ticket          Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  senderProfileId String
  senderProfile   Profile  @relation("TicketMessageSender", fields: [senderProfileId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("ticket_messages")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  GENERAL
  TECHNICAL
  BILLING
  FEATURE_REQUEST
  BUG_REPORT
  OTHER
}
