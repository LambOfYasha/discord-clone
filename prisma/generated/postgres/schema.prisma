generator client {
  provider = "prisma-client-js"
  output   = "../../prisma/generated/postgres"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers       Server[]
  members       Member[]
  channels      Channel[]
  conversations Conversation[]

  @@map("profiles")
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String    @unique
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("servers")
}

model Member {
  id                     String         @id @default(uuid())
  role                   MemberRole     @default(GUEST)
  profileId              String
  profile                Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  @@unique([profileId, serverId])
  @@map("members")
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("channels")
}

model Conversation {
  id          String   @id @default(uuid())
  memberOneId String
  memberOne   Member   @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member   @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([memberOneId, memberTwoId])
  @@map("conversations")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}
