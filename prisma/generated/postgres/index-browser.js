
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  nickname: 'nickname',
  imageUrl: 'imageUrl',
  email: 'email',
  status: 'status',
  bio: 'bio',
  website: 'website',
  socialMedia: 'socialMedia',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  imageUrl: 'imageUrl',
  inviteCode: 'inviteCode',
  category: 'category',
  profileId: 'profileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  profileId: 'profileId',
  serverId: 'serverId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChannelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  profileId: 'profileId',
  serverId: 'serverId',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  serverId: 'serverId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  memberOneId: 'memberOneId',
  memberTwoId: 'memberTwoId',
  profileId: 'profileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupConversationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  imageUrl: 'imageUrl',
  profileId: 'profileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupConversationMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  profileId: 'profileId',
  memberId: 'memberId',
  groupConversationId: 'groupConversationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  fileUrl: 'fileUrl',
  deleted: 'deleted',
  memberId: 'memberId',
  groupConversationId: 'groupConversationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  fileUrl: 'fileUrl',
  memberId: 'memberId',
  channelId: 'channelId',
  deleted: 'deleted',
  pinned: 'pinned',
  replyTo: 'replyTo',
  threadId: 'threadId',
  threadParentId: 'threadParentId',
  pollId: 'pollId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PollScalarFieldEnum = {
  id: 'id',
  question: 'question',
  expiresAt: 'expiresAt',
  allowMultipleVotes: 'allowMultipleVotes',
  isActive: 'isActive',
  totalVotes: 'totalVotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PollOptionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  votes: 'votes',
  pollId: 'pollId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PollVoteScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  pollOptionId: 'pollOptionId',
  createdAt: 'createdAt'
};

exports.Prisma.DirectMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  fileUrl: 'fileUrl',
  deleted: 'deleted',
  memberId: 'memberId',
  conversationId: 'conversationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FriendRequestScalarFieldEnum = {
  id: 'id',
  requesterProfileId: 'requesterProfileId',
  targetProfileId: 'targetProfileId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageRequestScalarFieldEnum = {
  id: 'id',
  requesterProfileId: 'requesterProfileId',
  targetProfileId: 'targetProfileId',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerProfileId: 'followerProfileId',
  followingProfileId: 'followingProfileId',
  createdAt: 'createdAt'
};

exports.Prisma.ServerFollowScalarFieldEnum = {
  id: 'id',
  followerProfileId: 'followerProfileId',
  serverId: 'serverId',
  createdAt: 'createdAt'
};

exports.Prisma.ThreadScalarFieldEnum = {
  id: 'id',
  channelId: 'channelId',
  parentMessageId: 'parentMessageId',
  name: 'name',
  messageCount: 'messageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  recipientProfileId: 'recipientProfileId',
  type: 'type',
  title: 'title',
  content: 'content',
  relatedProfileId: 'relatedProfileId',
  relatedServerId: 'relatedServerId',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.ServerEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  otherLocationType: 'otherLocationType',
  serverId: 'serverId',
  creatorProfileId: 'creatorProfileId',
  voiceChannelId: 'voiceChannelId',
  textChannelId: 'textChannelId',
  externalUrl: 'externalUrl',
  location: 'location',
  scheduledStartTime: 'scheduledStartTime',
  scheduledEndTime: 'scheduledEndTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmbedScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  url: 'url',
  color: 'color',
  imageUrl: 'imageUrl',
  thumbnailUrl: 'thumbnailUrl',
  authorName: 'authorName',
  authorUrl: 'authorUrl',
  authorIconUrl: 'authorIconUrl',
  footerText: 'footerText',
  footerIconUrl: 'footerIconUrl',
  timestamp: 'timestamp',
  serverId: 'serverId',
  channelId: 'channelId',
  creatorProfileId: 'creatorProfileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmbedFieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  inline: 'inline',
  embedId: 'embedId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduledAnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  serverId: 'serverId',
  channelId: 'channelId',
  creatorProfileId: 'creatorProfileId',
  scheduleType: 'scheduleType',
  scheduleData: 'scheduleData',
  isActive: 'isActive',
  lastSentAt: 'lastSentAt',
  nextSendAt: 'nextSendAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketSystemScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  channelId: 'channelId',
  isActive: 'isActive',
  welcomeMessage: 'welcomeMessage',
  maxOpenTickets: 'maxOpenTickets',
  autoCloseHours: 'autoCloseHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  ticketNumber: 'ticketNumber',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  category: 'category',
  requesterProfileId: 'requesterProfileId',
  assignedProfileId: 'assignedProfileId',
  serverId: 'serverId',
  ticketSystemId: 'ticketSystemId',
  channelId: 'channelId',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  fileUrl: 'fileUrl',
  isInternal: 'isInternal',
  ticketId: 'ticketId',
  senderProfileId: 'senderProfileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ONLINE: 'ONLINE',
  IDLE: 'IDLE',
  DO_NOT_DISTURB: 'DO_NOT_DISTURB',
  INVISIBLE: 'INVISIBLE'
};

exports.ServerCategory = exports.$Enums.ServerCategory = {
  POPULAR: 'POPULAR',
  CHRISTIANITY: 'CHRISTIANITY',
  BUSINESS: 'BUSINESS',
  SOCIAL: 'SOCIAL',
  SCIENCE_AND_EDUCATION: 'SCIENCE_AND_EDUCATION'
};

exports.MemberRole = exports.$Enums.MemberRole = {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  GUEST: 'GUEST'
};

exports.ChannelType = exports.$Enums.ChannelType = {
  TEXT: 'TEXT',
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO'
};

exports.GroupMemberRole = exports.$Enums.GroupMemberRole = {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  GUEST: 'GUEST'
};

exports.FriendRequestStatus = exports.$Enums.FriendRequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.MessageRequestStatus = exports.$Enums.MessageRequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  FRIEND_ACTIVITY: 'FRIEND_ACTIVITY',
  SERVER_ACTIVITY: 'SERVER_ACTIVITY',
  FRIEND_ONLINE: 'FRIEND_ONLINE',
  SERVER_JOIN: 'SERVER_JOIN',
  MESSAGE_MENTION: 'MESSAGE_MENTION',
  SERVER_INVITE: 'SERVER_INVITE'
};

exports.EventType = exports.$Enums.EventType = {
  VOICE: 'VOICE',
  OTHER: 'OTHER'
};

exports.OtherEventLocationType = exports.$Enums.OtherEventLocationType = {
  TEXT_CHANNEL: 'TEXT_CHANNEL',
  EXTERNAL: 'EXTERNAL',
  LOCATION: 'LOCATION'
};

exports.ScheduleType = exports.$Enums.ScheduleType = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  CUSTOM: 'CUSTOM'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  WAITING_FOR_USER: 'WAITING_FOR_USER',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TicketCategory = exports.$Enums.TicketCategory = {
  GENERAL: 'GENERAL',
  TECHNICAL: 'TECHNICAL',
  BILLING: 'BILLING',
  FEATURE_REQUEST: 'FEATURE_REQUEST',
  BUG_REPORT: 'BUG_REPORT',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Profile: 'Profile',
  Server: 'Server',
  Member: 'Member',
  Channel: 'Channel',
  Category: 'Category',
  Conversation: 'Conversation',
  GroupConversation: 'GroupConversation',
  GroupConversationMember: 'GroupConversationMember',
  GroupMessage: 'GroupMessage',
  Message: 'Message',
  Poll: 'Poll',
  PollOption: 'PollOption',
  PollVote: 'PollVote',
  DirectMessage: 'DirectMessage',
  FriendRequest: 'FriendRequest',
  MessageRequest: 'MessageRequest',
  Follow: 'Follow',
  ServerFollow: 'ServerFollow',
  Thread: 'Thread',
  Notification: 'Notification',
  ServerEvent: 'ServerEvent',
  Embed: 'Embed',
  EmbedField: 'EmbedField',
  ScheduledAnnouncement: 'ScheduledAnnouncement',
  TicketSystem: 'TicketSystem',
  Ticket: 'Ticket',
  TicketMessage: 'TicketMessage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
