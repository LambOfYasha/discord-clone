generator client {
  provider = "prisma-client-js"
  output = "../../prisma/generated/mongo"
}

datasource db {
  provider = "mongodb"
  url = env("MONGO_URL")
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  memberId String
  channelId String
  deleted Boolean @default(false)
  pinned Boolean @default(false)
  replyTo String?
  threadId String?
  threadParentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reactions Reaction[]

  @@map("messages")
}

model DirectMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  memberId String
  conversationId String
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("direct_messages")
}

model GroupMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  memberId String
  groupConversationId String
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("group_messages")
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  serverId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Thread {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  channelId String
  parentMessageId String?
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageCount Int @default(0)

  @@map("threads")
}

model Reaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  emoji String
  memberId String
  messageId String
  createdAt DateTime @default(now())
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, memberId, emoji])
  @@map("reactions")
}