generator client {
  provider = "prisma-client-js"
  output = "../../prisma/generated/mongo"
}

datasource db {
  provider = "mongodb"
  url = env("MONGO_URL")
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  memberId String
  channelId String
  deleted Boolean @default(false)
  pinned Boolean @default(false)
  replyTo String?
  threadId String?
  threadParentId String?
  pollId String?
  poll Poll? @relation(fields: [pollId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reactions Reaction[]

  @@map("messages")
}

model Poll {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  question String
  options PollOption[]
  expiresAt DateTime?
  allowMultipleVotes Boolean @default(false)
  isActive Boolean @default(true)
  totalVotes Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages Message[]

  @@map("polls")
}

model PollOption {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text String
  votes Int @default(0)
  pollId String
  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votesCast PollVote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("poll_options")
}

model PollVote {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  memberId String
  pollOptionId String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([memberId, pollOptionId])
  @@map("poll_votes")
}

model DirectMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  memberId String
  conversationId String
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("direct_messages")
}

model GroupMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  memberId String
  groupConversationId String
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("group_messages")
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  serverId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Thread {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  channelId String
  parentMessageId String?
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageCount Int @default(0)

  @@map("threads")
}

model Reaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  emoji String
  memberId String
  messageId String
  createdAt DateTime @default(now())
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, memberId, emoji])
  @@map("reactions")
}

// Embed feature
model Embed {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String?
  description String?
  url String?
  color String? // Hex color code
  imageUrl String?
  thumbnailUrl String?
  authorName String?
  authorUrl String?
  authorIconUrl String?
  footerText String?
  footerIconUrl String?
  timestamp DateTime?
  serverId String
  channelId String?
  creatorProfileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("embeds")
}

model EmbedField {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  value String
  inline Boolean @default(false)
  embedId String
  order Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("embed_fields")
}